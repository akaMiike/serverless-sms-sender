service: serverless-sms-sender

provider:
  name: aws
  runtime: java11
  region: us-east-1
  stage: dev
  httpApi:
    cors: true

  environment:
    TWILIO_ACCOUNT_SID: SID
    TWILIO_AUTH_TOKEN: AUTH
    TWILIO_PHONE_NUMBER: PHONE
    DESTINATION_PHONE_NUMBER: DEST
    FILE_UPLOAD_BUCKET_NAME: ${self:custom.fileUploadBucketName}
    CLIENT_REGION: ${self:provider.region}
    TABLE_NAME: ${self:custom.tableName}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:*
          Resource: "*"
        - Effect: Allow
          Action:
            - lambda:*
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "rekognition:*"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - dynamodb:*
          Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName}"

custom:
  tableName: images
  fileUploadBucketName: ${self:service}-buckettestetete-${self:provider.stage}

package:
  artifact: target/ServerlessSmsSender-1.0-SNAPSHOT.jar

functions:
  postImage:
    handler: org.example.functions.PostImage
    timeout: 60
    events:
      - httpApi:
          method: POST
          path: /{imageName}

  getImages:
    handler: org.example.functions.GetImages
    timeout: 60
    events:
      - httpApi:
          method: GET
          path: /images

  notifyPersonInPicture:
    handler: org.example.functions.NotifyPersonInPicture
    timeout: 60
    events:
      - httpApi:
          method: GET
          path: /notify-person

  markImageUploaded:
    handler: org.example.functions.MarkImageUpload
    timeout: 60
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ Queue, 'Arn' ]
          batchSize: 5
          maximumBatchingWindow: 2
    environment:
      FUNCTION_ARN:
        "Fn::GetAtt": [ VerifyImageLabelsLambdaFunction, Arn ]
  verifyImageLabels:
    handler: org.example.functions.VerifyImageLabels
    timeout: 60
    events:
      - httpApi:
          method: POST
          path: /verify-labels
    environment:
      NOTIFY_PERSON_IN_PICTURE_ARN:
        "Fn::GetAtt": [ NotifyPersonInPictureLambdaFunction, Arn ]
resources:
  Resources:
    ImagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        KeySchema:
          - AttributeName: imageId
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: imageId
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    Queue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: queue
        VisibilityTimeout: 65
    QueuePolicy:
      DependsOn: Queue
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref Queue
        PolicyDocument:
          Statement:
            - Sid: sid
              Effect: Allow
              Principal:
                Service: s3.amazonaws.com
              Action: SQS:SendMessage
              Resource:
                Fn::GetAtt: [ Queue, 'Arn' ]
              Condition:
                StringEquals:
                  aws:SourceAccount: ${aws:accountId}
                ArnLike:
                  aws:SourceArn: arn:aws:s3:*:*:${self:custom.fileUploadBucketName}
    FileBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.fileUploadBucketName}
        AccessControl: Private
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - PUT
                - POST
                - GET
              AllowedOrigins:
                - '*'
        NotificationConfiguration:
          QueueConfigurations:
            - Event: s3:ObjectCreated:Put
              Queue:
                Fn::GetAtt: [ Queue, 'Arn' ]
      DependsOn:
        - Queue
        - QueuePolicy